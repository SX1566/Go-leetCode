# command-line-arguments
.\11.内存逃逸.go:12:2: name escapes to heap:
.\11.内存逃逸.go:12:2:   flow: p0 = &name:
.\11.内存逃逸.go:12:2:     from &name (address-of) at .\11.内存逃逸.go:13:8
.\11.内存逃逸.go:12:2:     from p0 := &name (assign) at .\11.内存逃逸.go:13:5
.\11.内存逃逸.go:12:2:   flow: {storage for ... argument} = p0:
.\11.内存逃逸.go:12:2:     from p0 (interface-converted) at .\11.内存逃逸.go:14:14
.\11.内存逃逸.go:12:2:     from ... argument (slice-literal-element) at .\11.内存逃逸.go:14:13
.\11.内存逃逸.go:12:2:   flow: {heap} = {storage for ... argument}:
.\11.内存逃逸.go:12:2:     from ... argument (spill) at .\11.内存逃逸.go:14:13
.\11.内存逃逸.go:12:2:     from fmt.Println(... argument...) (call parameter) at .\11.内存逃逸.go:14:13
.\11.内存逃逸.go:14:14: "p0: " escapes to heap:
.\11.内存逃逸.go:14:14:   flow: {storage for ... argument} = &{storage for "p0: "}:
.\11.内存逃逸.go:14:14:     from "p0: " (spill) at .\11.内存逃逸.go:14:14
.\11.内存逃逸.go:14:14:     from ... argument (slice-literal-element) at .\11.内存逃逸.go:14:13
.\11.内存逃逸.go:14:14:   flow: {heap} = {storage for ... argument}:
.\11.内存逃逸.go:14:14:     from ... argument (spill) at .\11.内存逃逸.go:14:13
.\11.内存逃逸.go:14:14:     from fmt.Println(... argument...) (call parameter) at .\11.内存逃逸.go:14:13
.\11.内存逃逸.go:16:2: city escapes to heap:
.\11.内存逃逸.go:16:2:   flow: ptr = &city:
.\11.内存逃逸.go:16:2:     from &city (address-of) at .\11.内存逃逸.go:17:9
.\11.内存逃逸.go:16:2:     from ptr := &city (assign) at .\11.内存逃逸.go:17:6
.\11.内存逃逸.go:16:2:   flow: ~r0 = ptr:
.\11.内存逃逸.go:16:2:     from return ptr (return) at .\11.内存逃逸.go:18:2
.\11.内存逃逸.go:12:2: moved to heap: name
.\11.内存逃逸.go:16:2: moved to heap: city
.\11.内存逃逸.go:14:13: ... argument does not escape
.\11.内存逃逸.go:14:14: "p0: " escapes to heap
.\11.内存逃逸.go:7:13: ... argument does not escape
